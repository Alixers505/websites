import markets from './markets';
import findActiveFacet from './find-active-facet';
import cloudfront from '../../services/cloud-front-search';

$ const isDevelopment = process.env.NODE_ENV === 'development';
$ const { req, onAsyncBlockError } = out.global;
$ const { phrase = '', topicId, marketId, page = 1 } = req.query;

$ const activeTopic = findActiveFacet(input.topics, topicId);
$ const activeMarket = findActiveFacet(markets, marketId);

$ const searchParams = {
  ...input.searchOptions,
  contentType: input.contentType,
  pageNumber: page,
};

<!-- $ const { api, featureExpression, sort, pageSize, type, facets } = supplierDirectory

$ const args = {
  api: api,
  urlParams: {
    'expr.featured': featureExpression,
    sort: sort,
    size: pageSize,
    start: start,
    page: page,
    q: q,
  },
  type: type,
  facets: {
    market: market,
    topic: topic,
  },
}; -->

<div class="row">
  <div class="col mb-block">
    <form>
      <input name="phrase" type="search" class="form-control mb-2" placeholder="Enter search phrase..." value=phrase>
      <if(marketId)><input name="marketId" type="hidden" value=marketId></if>
      <if(topicId)><input name="topicId" type="hidden" value=topicId></if>
      <button type="submit" class="btn btn-primary">Search</button>
    </form>
  </div>
</div>
<div class="row">
  <div class="col-4 mb-block">
    <facet-container
      facets=markets
      title="Market"
      param-name="marketId"
      active-ids=activeMarket.activeIds
    />
    <facet-container
      facets=input.topics
      title="Category"
      param-name="topicId"
      active-ids=activeTopic.activeIds
    />
  </div>
  <div class="col-8 mb-block">
    <await(cloudfront.search(searchParams))>
      <@then|{ hits }|>
        <search-hits hits=hits />
      </@then>
      <@catch|err|>
        $ if (typeof onAsyncBlockError === 'function') onAsyncBlockError(err);
        <pre>An unexpected error occurred: ${err.message}</pre>
        <if(isDevelopment)>
          <pre>${err.stack}</pre>
        </if>
      </@catch>
    </await>
    <!-- <ul class="item-list"> -->
      <!-- <div class="feature-results">
        <if(topicId && marketId)>
          <bizbash-pinned-directory-card|{ content }| section-id=Number(topic) market-id=Number(market)>
            <if(content)>
              $ const primarySection = getAsObject(content, 'primarySection');
              $ const primaryImage = getAsObject(content, 'primaryImage');
              $ const dateFormat = 'MMMM D, YYYY';
              $ const imageInput = {
                image: primaryImage,
                lazyload: false,
                linkTo: content,
                modifiers: ['fluid', '3by2'],
                options: { w: 642, h: 428, fit: 'crop', crop: 'focalpoint', fpX: 0.5, fpY: 0.5 },
                position: 'top',
                usePlaceholder: false,
                ...getAsObject(input, 'image'),
              };
              <div class="featured-directory-listing-item">
                <div class="sponsoreship-title">
                  ${activeTopic[0].name} by ${content.shortName}
                </div>
                <endeavor-item modifiers=["card", "hero-card"]>

                  <@image ...imageInput />
                  <@title tag="h5" modifiers=["medium"]>
                    <cms-content-short-name tag=null obj=content link=true />
                  </@title>
                  <@description tag="p">
                    ${content.address1}<br>
                    ${content.city}, ${content.state} ${content.zip} ${content.country}
                  </@description>
                </endeavor-item>
              </div>
            </if>
          </bizbash-pinned-directory-card>
        </if>
      </div> -->

      <!-- <div class="search-results">
        <ul class="item-list item-list--flush item-list--card">
          <div class="item-list__contents">
            <await(retrieveResults(args))>
              <@then|response|>
                <if(response.hits)>
                  <for|result, index| of=response.hits.hit>
                      <li class="item-list__item">
                        <div class="item item--image-left">
                          <div class="item__image">
                            <a href=`/${result.id}`>
                              <img src=generateResultImage(result) alt=`${result.fields.name}` width="176" height="99">
                            </a>
                          </div>
                          <div class="item_contents">
                            <h5 class="item__title">
                              <a href=`/${result.id}`>
                                ${result.fields.name}
                              </a>
                            </h5>
                            <p class="item__teaser">
                              ${result.fields.address1}<br>
                              ${result.fields.city}, ${result.fields.state} ${result.fields.zip} ${result.fields.country}
                            </p>
                          </div>
                        </div>
                      </li>
                  </for>
                  <ul class="list-unstyled d-flex justify-content-between pagination">
                    $ const prevLink = getPaginationLink(req, -1, pageSize, response.hits.found);
                    $ const nextLink = getPaginationLink(req, 1, pageSize, response.hits.found);
                    $ const paginationInfo = getPaginationInfo(start, pageSize, response.hits.found);
                    <li class="previous disabled">
                      <a href=`${prevLink}`><< Previous</a>
                    </li>
                    <li class="current">
                      ${paginationInfo}
                    </li>
                    <li class="next">
                      <a href=`${nextLink}`>
                        Next >>
                      </a>
                    </li>
                  </ul>
                </if>
              </@then>
              <@catch|err|>
                $ if (typeof onAsyncBlockError === 'function') onAsyncBlockError(err);
                <if(input.onError)>
                  <${input.onError} err=err />
                </if>
                <else>
                  <pre>An unexpected error occurred: ${err.message}</pre>
                </else>
              </@catch>
            </await>
          </div>
        </ul>
      </div> -->
    <!-- </ul> -->
  </div>
</div>
